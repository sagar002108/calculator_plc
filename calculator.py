# -*- coding: utf-8 -*-
"""calculator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JTPGzjcex0EDel6qcsE6jTX-PVHX-7o1
"""

import sys

def is_operator(token):
    """Checks if a token is an operator."""
    return token in {'+', '*'}

def evaluate_prefix(expression):
    """Evaluates a prefix expression and converts it to infix notation."""
    stack = []

    # Process the expression from right to left
    for token in reversed(expression):
        if token.isdigit():  # If token is a number, push it to stack
            stack.append((int(token), token))  # (value, infix representation)
        elif is_operator(token):
            if len(stack) < 2:
                raise ValueError("Invalid expression: Not enough operands")

            # Pop two operands
            val1, infix1 = stack.pop()
            val2, infix2 = stack.pop()

            # Evaluate the expression
            if token == '+':
                result = val1 + val2
                infix_expr = f"({infix1} + {infix2})"
            elif token == '*':
                result = val1 * val2
                infix_expr = f"({infix1} * {infix2})"

            # Push result and infix expression back to stack
            stack.append((result, infix_expr))
        else:
            raise ValueError(f"Invalid token: {token}")

    if len(stack) != 1:
        raise ValueError("Invalid expression: Extra operands or operators")

    return stack[0]  # Returns (evaluated result, infix expression)


def main():
    """Handles user input and calls the evaluation function."""
    try:
        expression = input("Enter prefix expression (space-separated): ").split()
        result, infix_expr = evaluate_prefix(expression)
        print(f"Result: {result}")
        print(f"Infix Notation: {infix_expr}")
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)


if __name__ == "__main__":
    main()

import sys

class PrefixCalculator:
    def __init__(self, expression):
        """Initializes the calculator with a tokenized expression."""
        self.tokens = expression.split()
        self.index = 0

    def is_operator(self, token):
        """Checks if the token is a valid operator (+ or *)."""
        return token in {"+", "*"}

    def parse_expression(self):
        """Parses and evaluates the prefix expression recursively."""
        if self.index >= len(self.tokens):
            raise ValueError("Invalid expression: Unexpected end of input.")

        token = self.tokens[self.index]
        self.index += 1  # Move to the next token

        print(f"Processing token: {token}")

        if token.isdigit():  # If the token is a number, return it as a result
            return int(token), token  # (evaluated value, infix expression)

        elif self.is_operator(token):
            print(f"Operator found: {token}, parsing next operands...")

            # Recursively parse left and right operands
            left_value, left_infix = self.parse_expression()
            right_value, right_infix = self.parse_expression()

            print(f"Operands received: {left_value} and {right_value}")

            # Compute result based on operator
            if token == "+":
                result = left_value + right_value
                infix_expr = f"({left_infix} + {right_infix})"
            elif token == "*":
                result = left_value * right_value
                infix_expr = f"({left_infix} * {right_infix})"

            print(f"Computed {left_value} {token} {right_value} = {result}")
            return result, infix_expr

        else:
            raise ValueError(f"Invalid token encountered: {token}")

    def evaluate(self):
        """Evaluates the expression and ensures correctness."""
        result, infix_expr = self.parse_expression()

        # Check if entire expression was consumed
        if self.index < len(self.tokens):
            raise ValueError("Invalid expression: Extra tokens remaining.")

        return result, infix_expr


def main():
    """Handles user input and calls the calculator."""
    try:
        expression = input("Enter prefix expression (space-separated): ")
        calculator = PrefixCalculator(expression)

        result, infix_expr = calculator.evaluate()

        print("\n--- Calculation Completed ---")
        print(f"Result: {result}")
        print(f"Infix Notation: {infix_expr}")

    except Exception as e:
        print(f"\nError: {e}", file=sys.stderr)


if __name__ == "__main__":
    main()